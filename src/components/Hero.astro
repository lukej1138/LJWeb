---
import Button from './Button.astro';
import frontPhoto from '/public/frontphoto.jpeg';
import backphotoleft from '/public/backphoto-left.jpg';
import backphotoright from '/public/backphoto-right-3.jpg';
---
<header class = "grid-lg">
    <div class = "grid-sm">
        <h1 class="h1 text-standard-gradient">The LJCoolJ Portfolio ;D</h1>
        <p id="heroType" class="h3 text-text-alt narrow hidden">Welcome To My Slice Of The Internet <:)</p>
    </div>
    <div class = "grid-sm">
        <Button text="Check Them Out" link="#projects" style="secondary"/>
        <small class="text-text-alt">Trust Me, They're Super Cool</small>
    </div>
</header>
<section class="photos-container container blur grid-md">
    <section class="back-photos">
        <img src={backphotoleft.src} class="back-photo hiddenX" data-direction="left" alt="mainPhoto" aria-hidden="true"/>
        <img src={backphotoright.src} class="back-photo hiddenX" data-direction="right" alt="mainPhoto" aria-hidden="true"/>
    </section>
    <img src={frontPhoto.src} class="front-photo hiddenY" alt="mainPhoto" aria-hidden="true"/>
</section>

<script>
    document.addEventListener("DOMContentLoaded", test)

    async function test() {
        const elements = document.querySelectorAll(".hiddenX");
        const observer = new IntersectionObserver((entries, observer) =>{
            entries.forEach(entry =>{
                if(entry.isIntersecting) {
                    entry.target.classList.remove("hiddenX");
                    entry.target.classList.add("visibleX");
                    observer.unobserve(entry.target);
                }
            }), {threshold: 0.2}
        });
        let delay = 0;
        let i = 0
        const staggerDelay = 700; // Adjust the delay (milliseconds) for the stagger effect

        elements.forEach(element => {
            if(i < 2){
                setTimeout(() => {
                    observer.observe(element);
                }, delay);
                delay += staggerDelay;
                i++;
            }
            else{
                observer.observe(element);
            }
        });
    }
</script>
<script>
    document.addEventListener("DOMContentLoaded", function() {
    const elements = document.querySelectorAll(".hiddenY");
    const observer = new IntersectionObserver((entries, observer) =>{
        entries.forEach(entry =>{
            if(entry.isIntersecting) {
                entry.target.classList.add("visibleY");
                observer.unobserve(entry.target);
            }
        });
    }, {threshold: 0.1});

    let isFirst = true
    const delay = 1300
    elements.forEach(element => {
        if(isFirst){
            setTimeout(() => {
                observer.observe(element)}, delay);
            isFirst = false;
        }
        else{
            observer.observe(element);
        }
    });     
});
</script>
<script>
        document.addEventListener('DOMContentLoaded', function() {
        typeWrite()
    });


    async function typeWrite() {
        let i = 0;
        var element = document.getElementById("heroType");
        if(!element) return;
        var text = element.textContent;
        element.textContent = "";
        element.innerHTML = '<span id="cursor">_</span>'
        element.classList.remove("hidden");
        if(!text) return;
        while(i < text.length){
            element.innerHTML = text.slice(0, i+1) + '<span id="cursor">_</span>';
            i++
            await pause(100);
        }
        blinkCursor()
    }

    function blinkCursor(){
        const cursor = document.getElementById("cursor");
        if(!cursor) return;
        setInterval(() => {cursor.style.visibility = cursor.style.visibility === 'hidden' ? 'visible' : 'hidden'},
        530);
    }
    function pause(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
}

</script>